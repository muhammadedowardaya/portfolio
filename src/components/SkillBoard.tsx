/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react';
import { useGLTF, useAnimations, useTexture } from '@react-three/drei';
import {
	Color,
	MeshStandardMaterial,
	RepeatWrapping,
	Vector3,
	type Group,
	type SkinnedMesh,
} from 'three';
import type { JSX } from 'astro/jsx-runtime';
import { useAtomValue } from 'jotai';
import {
	currentIntroIndexAtom,
	rightHandPositionAtom,
	selectedMenuAtom,
} from '@/lib/jotai';
import { useFrame } from '@react-three/fiber';

type MeshProps = JSX.IntrinsicElements['group'];

export function SkillBoard(props: MeshProps) {
	const group = useRef<Group | null>(null);
	const { nodes, materials, animations } = useGLTF(
		`${import.meta.env.PUBLIC_SITE}/models/skills-board.glb`
	);
	const { actions } = useAnimations(animations, group);

	const texture = useTexture(
		`${import.meta.env.PUBLIC_SITE}/textures/my-skills.png`
	);
	texture.wrapS = texture.wrapT = RepeatWrapping;
	texture.repeat.set(1, 1);

	const rightHandPosition = useAtomValue(rightHandPositionAtom);
	const [x, y, z] = rightHandPosition;

	const currentIntroIndex = useAtomValue(currentIntroIndexAtom);
	const selectedMenu = useAtomValue(selectedMenuAtom);

	const [show, setShow] = useState(false);

	// const characterPosition = useAtomValue(characterPositionAtom);
	// const [x, y, z] = characterPosition;

	useFrame((state, delta) => {
		const offset = new Vector3(0.455, 0.4, 0.12);
		const target = new Vector3(x, y, z).add(offset);

		const mat = materials['skills-board_tv'] as MeshStandardMaterial;

		if (currentIntroIndex === 3) {
			group.current?.position.lerp(target, 1);

			if (mat.emissiveMap) {
				mat.emissiveMap.offset.x += delta * 0.05;

				if (mat.emissiveMap.offset.x > 10) {
					mat.emissiveMap.offset.x = 0;
				}

				// Optional: mat.map.needsUpdate = true; // aktifkan jika offset tidak langsung terlihat
			}
		} else {
			if (mat.emissiveMap) {
				mat.emissiveMap.offset.x = 0;
			}
		}
	});

	useEffect(() => {
		const mat = materials['skills-board_tv'] as MeshStandardMaterial;

		if (mat.emissiveMap) {
			mat.emissiveMap.wrapS = RepeatWrapping;
			mat.emissiveMap.wrapT = RepeatWrapping;
			mat.emissiveMap.repeat.set(0.045 * 4, 1 * 4);

			mat.emissiveMap.needsUpdate = true;
		}
	}, [nodes, materials]);

	useEffect(() => {
		if (selectedMenu === 'tentang_saya' && currentIntroIndex === 3) {
			setShow(true);
		} else {
			setShow(false);
		}
	}, [selectedMenu, currentIntroIndex]);

	return (
		<group
			ref={group}
			{...props}
			dispose={null}
			rotation={[0, 3.25, 3.13 / 2]}
			scale={0.45}
			position={[-145, 10, -4]}
			visible={show}
		>
			<group name="Scene">
				<mesh
					name="skills-board"
					castShadow
					receiveShadow
					geometry={(nodes['skills-board'] as SkinnedMesh).geometry}
					material={materials['skills-board']}
					scale={[1, 1, 0.1]}
				>
					<mesh
						name="skills-board_tv"
						castShadow
						receiveShadow
						geometry={(nodes['skills-board_tv'] as SkinnedMesh).geometry}
						material={materials['skills-board_tv']}
					/>
				</mesh>
				<group name="skills-board-reference" position={[0.955, 0, 0]} />
			</group>
		</group>
	);
}

useGLTF.preload(`${import.meta.env.PUBLIC_SITE}/models/skills-board.glb`);
